import json
import os
import datetime
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from states import Stages
from data import universities
from userData import users_info
from pointsParse import send_info, update_userdata, get_userdata

logging.basicConfig(level=logging.INFO)

load_dotenv()
storage = MemoryStorage()

bot = Bot(token=os.getenv('TOKEN'), parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)

universityNames = list(universities.keys())
admin_id = [int(os.getenv('ADMIN_ID'))]


async def on_startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')


async def on_shutdown(_):
    print('–ë–æ—Ç –æ—Ç–∫–∏–Ω—É–ª—Å—è')


@dp.message_handler(commands='admin', state='*')
async def admin(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_id:
        args = message.get_args()
        if args.split()[0] == 'say':
            users = await users_info.get_users()
            for user in users:
                try:
                    await bot.send_message(user[0], args[4:])
                except:
                    pass
            await bot.send_message(admin_id[0], '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!')
        elif args.split()[0] == 'say_test':
            await bot.send_message(admin_id[0], args[9:])
        elif args.split()[0] == 'say_to':
            await bot.send_message(int(args.split()[1]), ' '.join(args.split()[2:]))


@dp.message_handler(commands='contacts', state='*')
async def contacts(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id, '<b>--------------- ‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è ---------------</b>\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:\n@dazesss\n\n–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞:\nhttps://t.me/urfupointsnews')


@dp.message_handler(commands='donate', state='*')
async def donate(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id, '<b>--------------- üí∞ –î–æ–Ω–∞—Ç üí∞ ---------------</b>\n\n<b>5469 1600 1991 3958</b> - —Å–±–µ—Ä\n<b>5536 9140 6615 8761</b> - —Ç–∏–Ω—å–∫–æ—Ñ—Ñ') 


@dp.message_handler(commands='info', state='*')
async def info(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id, '<b>--------------- ‚ùï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùï ---------------</b>\n\n–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–º —Å–ø–∏—Å–∫–µ, —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç, –∞ —Ç–∞–∫–∂–µ —á–∏—Å–ª–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.\n\n‚ùóÔ∏è–ù–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º –æ—Ç –£—Ä–§–£‚ùóÔ∏è\n\n–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º, –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ —Ç–∞–∫–∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏ –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @dazesss\n\n<i>P.S. –µ—Å–ª–∏ –≤—ã –≤–¥—Ä—É–≥ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, —Ç–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ:</i>\n/donate\n\nüòäüòäüòä')


@dp.message_handler(commands='start', state='*')
async def startuem(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id, f'<b>‚ú®–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ URFU Points!‚ú®</b>\n<i>(–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º –æ—Ç –£—Ä–§–£)</i>\n\n–° –µ–≥–æ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–º —Å–ø–∏—Å–∫–µ, —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç, –∞ —Ç–∞–∫–∂–µ —á–∏—Å–ª–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.\n\n–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º, –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ —Ç–∞–∫–∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏ –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @dazesss\n\n<i>P.S. –µ—Å–ª–∏ –≤—ã –≤–¥—Ä—É–≥ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, —Ç–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ:</i>\n/donate\n\nüòäüòäüòä')
    await bot.send_message(message.chat.id, '–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞:\nhttps://t.me/urfupointsnews')

    keyboard = create_buttons(['1Ô∏è‚É£ –ù–æ–º–µ—Ä', '2Ô∏è‚É£ –ë–∞–ª–ª—ã'], 2)

    stage, mess = chose_way()

    await stage.set()
    await update_userdata(message.from_user, state)
    await bot.send_message(message.chat.id, mess, reply_markup=keyboard)


@dp.message_handler(state=Stages.choice)
async def start(message: types.Message, state: FSMContext):
    if message.text.lower() == '1Ô∏è‚É£ –Ω–æ–º–µ—Ä' or message.text == '1':
        keyboard = create_button('–ù–∞–∑–∞–¥')

        await state.update_data(choseNumber=True)
        await Stages.number.set()
        await update_userdata(message.from_user, state)
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä', reply_markup=keyboard)
    elif message.text.lower() == '2Ô∏è‚É£ –±–∞–ª–ª—ã' or message.text == '2':
        keyboard = create_button('–ù–∞–∑–∞–¥')

        await state.update_data(choseNumber=False)
        await Stages.points.set()
        await update_userdata(message.from_user, state)
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ—é —Å—É–º–º—É –±–∞–ª–ª–æ–≤ –ï–ì–≠', reply_markup=keyboard)


@dp.message_handler(state=Stages.number)
async def get_number(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        keyboard = create_buttons(['1Ô∏è‚É£ –ù–æ–º–µ—Ä', '2Ô∏è‚É£ –ë–∞–ª–ª—ã'], 2)

        stage, mess = chose_way()

        await stage.set()
        await update_userdata(message.from_user, state)
        await bot.send_message(message.chat.id, mess, reply_markup=keyboard)
    else:
        await state.update_data(user_data=message.text)

        keyboard = create_list(universityNames)

        await Stages.university.set()
        await update_userdata(message.from_user, state)
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=keyboard)


@dp.message_handler(state=Stages.points)
async def get_points(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        keyboard = create_buttons(['1Ô∏è‚É£ –ù–æ–º–µ—Ä', '2Ô∏è‚É£ –ë–∞–ª–ª—ã'], 2)

        stage, mess = chose_way()

        await stage.set()
        await update_userdata(message.from_user, state)
        await bot.send_message(message.chat.id, mess, reply_markup=keyboard)
    else:
        try:
            await state.update_data(user_data=int(message.text))

            keyboard = create_list(universityNames)

            await Stages.university.set()
            await update_userdata(message.from_user, state)
            await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=keyboard)
        except:
            pass


@dp.message_handler(state=Stages.university)
async def get_university(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        data = await state.get_data()
        if data.get('choseNumber'):
            keyboard = create_button('–ù–∞–∑–∞–¥')

            await Stages.number.set()
            await update_userdata(message.from_user, state)
            await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä', reply_markup=keyboard)
        else:
            keyboard = create_button('–ù–∞–∑–∞–¥')

            await Stages.points.set()
            await update_userdata(message.from_user, state)
            await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ—é —Å—É–º–º—É –±–∞–ª–ª–æ–≤ –ï–ì–≠', reply_markup=keyboard)     
    elif message.text in universityNames:
        directions = universities[message.text]['directions']
        keyboard = create_list(directions)

        await state.update_data(university=message.text)
        await Stages.direction.set()
        await update_userdata(message.from_user, state)
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è', reply_markup=keyboard)


@dp.message_handler(state=Stages.direction)
async def get_direction(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        keyboard = create_list(universityNames)

        await Stages.university.set()
        await update_userdata(message.from_user, state)
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=keyboard)
    else:
        data = await state.get_data()
        university = data.get('university')
        if message.text in universities[university]['directions']:
            loading = await bot.send_message(message.chat.id, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...')

            await state.update_data(direction=message.text)
            await Stages.retry.set()
            
            direct = message.text

            keyboard = create_buttons(['–ù–∞–∑–∞–¥', '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', '–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'], 2)  

            ident = universities[university]['ident']
            userData = data.get('user_data')
            choseNumber = data.get('choseNumber')

            info = send_info(ident, userData, direct, choseNumber)

            await update_userdata(message.from_user, state)

            if message.from_user.username is not None:
                print(message.from_user.id, message.from_user.username, f'({str(info["position"])}/{str(info["budgetPlaces"])})', direct, '|' + str(userData) + '|', datetime.datetime.now().strftime(f"%d.%m %H:%M"))
            else:
                print(message.from_user.id, message.from_user.first_name, f'({str(info["position"])}/{str(info["budgetPlaces"])})', direct, '|' + str(userData) + '|', datetime.datetime.now().strftime(f"%d.%m %H:%M"))


            if info['potential']:
                mess = f'\n\n<b>(–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {info["potentialPosition"]})</b>\n\n<i>P.S. –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏—à—å –ø—Ä–∏–º–µ—Ä–Ω–æ, –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö—É–¥—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ (—Å—Ä–µ–¥–∏ –ª—é–¥–µ–π —Å —Ç–∞–∫–∏–º –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º)</i>'
            else:
                mess = ''


            await loading.delete()
            await bot.send_message(message.chat.id, f'<b>{direct}</b>\n\n–ë—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞:  <b>{info["budgetPlaces"]}</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤:  <b>{info["abiturients"]}</b>\n–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ:  <b>{info["position"]}</b>' + mess, reply_markup=keyboard)


@dp.message_handler(state=Stages.retry)
async def retry(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
        keyboard = create_buttons(['1Ô∏è‚É£ –ù–æ–º–µ—Ä', '2Ô∏è‚É£ –ë–∞–ª–ª—ã'], 2)

        stage, mess = chose_way()

        await stage.set()
        await update_userdata(message.from_user, state)
        await bot.send_message(message.chat.id, mess, reply_markup=keyboard)
    elif message.text.lower() == '–Ω–∞–∑–∞–¥':
        data = await state.get_data()
        directions = universities[data.get('university')]['directions']
        keyboard = create_list(directions)

        await Stages.direction.set()
        await update_userdata(message.from_user, state)
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è', reply_markup=keyboard)
    elif message.text.lower() == '–æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é':
        loading = await bot.send_message(message.chat.id, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...')

        data = await state.get_data()
        university = data.get("university")
        direct = data.get('direction')

        keyboard = create_buttons(['–ù–∞–∑–∞–¥', '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', '–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'], 2)  

        ident = universities[university]['ident']
        userData = data.get('user_data')
        choseNumber = data.get('choseNumber')

        info = send_info(ident, userData, direct, choseNumber)

        await update_userdata(message.from_user, state)

        if message.from_user.username is not None:
            print(message.from_user.id, message.from_user.username, f'({str(info["position"])}/{str(info["budgetPlaces"])})', direct, '|' + str(userData) + '|', datetime.datetime.now().strftime(f"%d.%m %H:%M"))
        else:
            print(message.from_user.id, message.from_user.first_name, f'({str(info["position"])}/{str(info["budgetPlaces"])})', direct, '|' + str(userData) + '|', datetime.datetime.now().strftime(f"%d.%m %H:%M"))


        if info['potential']:
            mess = f'\n\n<b>(–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {info["potentialPosition"]})</b>\n\n<i>P.S. –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏—à—å –ø—Ä–∏–º–µ—Ä–Ω–æ, –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö—É–¥—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ (—Å—Ä–µ–¥–∏ –ª—é–¥–µ–π —Å —Ç–∞–∫–∏–º –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º)</i>'
        else:
            mess = ''


        await loading.delete()
        await bot.send_message(message.chat.id, f'<b>{direct}</b>\n\n–ë—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞:  <b>{info["budgetPlaces"]}</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤:  <b>{info["abiturients"]}</b>\n–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ:  <b>{info["position"]}</b>' + mess, reply_markup=keyboard)


@dp.message_handler()
async def calm(message: types.Message, state: FSMContext):
    inf = await get_userdata(message.from_user)
    state_name = inf[0]
    data = json.loads(inf[1])
    await restore_data(message, state, state_name, data)
        

async def restore_data(message, state, state_name, data):
    match state_name:
        case 'choice':
            await Stages.choice.set()
            await start(message, state)
        case 'number':
            await state.set_data(data)
            await Stages.number.set()
            await get_number(message, state)
        case 'points':
            await state.set_data(data)
            await Stages.points.set()
            await get_points(message, state)
        case 'university':
            await state.set_data(data)
            await Stages.university.set()
            await get_university(message, state)
        case 'direction':
            await state.set_data(data)
            await Stages.direction.set()
            await get_direction(message, state)
        case 'retry':
            await state.set_data(data)
            await Stages.retry.set()
            await retry(message, state)
        case _:
            await startuem(message, state)


def chose_way():
    return Stages.choice, f'<b>–¢—ã –º–æ–∂–µ—à—å:</b>\n\n1Ô∏è‚É£  –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Ç–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –£—Ä–§–£\n\n2Ô∏è‚É£  –£–∑–Ω–∞—Ç—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å—É–º–º–µ –±–∞–ª–ª–æ–≤ –ï–ì–≠ <b><i>(–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–ª–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ö—É–¥—à–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ)</i></b>'


def create_button(text):
    button = types.KeyboardButton(text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(button)

    return keyboard


def create_buttons(btns, width):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=width)
    keyboard.add(*btns)

    return keyboard


def create_list(button_list):
    backButton = types.KeyboardButton('–ù–∞–∑–∞–¥')
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(backButton).add(*button_list)

    return keyboard
    

if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
    except:
        print('–±–æ—Ç –æ—Ç–∫–∏–Ω—É–ª—Å—è')